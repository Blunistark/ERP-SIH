{
  "nodes": [
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get table definition to find all columns and types",
        "operation": "executeQuery",
        "query": "select\n  c.column_name,\n  c.data_type,\n  c.is_nullable,\n  c.column_default,\n  tc.constraint_type,\n  ccu.table_name AS referenced_table,\n  ccu.column_name AS referenced_column\nfrom\n  information_schema.columns c\nLEFT join\n  information_schema.key_column_usage kcu\n  ON c.table_name = kcu.table_name\n  AND c.column_name = kcu.column_name\nLEFT join\n  information_schema.table_constraints tc\n  ON kcu.constraint_name = tc.constraint_name\n  AND tc.constraint_type = 'FOREIGN KEY'\nLEFT join\n  information_schema.constraint_column_usage ccu\n  ON tc.constraint_name = ccu.constraint_name\nwhere\n  c.table_name = '{{ $fromAI(\"table_name\") }}'\n  AND c.table_schema = '{{ $fromAI(\"schema_name\") }}'\norder by\n  c.ordinal_position",
        "options": {}
      },
      "id": "11f2013f-a080-4c9e-8773-c90492e2c628",
      "name": "Get Table Definition",
      "type": "n8n-nodes-base.postgresTool",
      "position": [
        944,
        528
      ],
      "typeVersion": 2.5,
      "credentials": {
        "postgres": {
          "id": "Ma9g16If3wmQxf3d",
          "name": "Postgres account 3"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get all the data from Postgres, make sure you append the tables with correct schema. Every table is associated with some schema in the database.",
        "operation": "executeQuery",
        "query": "{{ $fromAI(\"sql_query\", \"SQL Query\") }}",
        "options": {}
      },
      "id": "c18ced71-6330-4ba0-9c52-1bb5852b3039",
      "name": "Execute SQL Query",
      "type": "n8n-nodes-base.postgresTool",
      "position": [
        816,
        528
      ],
      "typeVersion": 2.5,
      "credentials": {
        "postgres": {
          "id": "Ma9g16If3wmQxf3d",
          "name": "Postgres account 3"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get list of all tables with their schema in the database",
        "operation": "executeQuery",
        "query": "SELECT \n    table_schema,\n    table_name\nFROM information_schema.tables\nWHERE table_type = 'BASE TABLE'\n    AND table_schema NOT IN ('pg_catalog', 'information_schema')\nORDER BY table_schema, table_name;",
        "options": {}
      },
      "id": "557623c6-e499-48a6-a066-744f64f8b6f3",
      "name": "Get DB Schema and Tables List",
      "type": "n8n-nodes-base.postgresTool",
      "position": [
        1072,
        528
      ],
      "typeVersion": 2.5,
      "credentials": {
        "postgres": {
          "id": "Ma9g16If3wmQxf3d",
          "name": "Postgres account 3"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        560,
        528
      ],
      "id": "463cce4d-8e5f-41d3-bfbf-3533ff149984",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "jJ9NFfD7cXx6DOeR",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "path": "DB_Agent"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
      "typeVersion": 2,
      "position": [
        752,
        96
      ],
      "id": "bf2bea6a-6745-4e24-b9da-9c6d86b495ed",
      "name": "DB MCP",
      "webhookId": "162fa9cf-b15f-469d-b2b8-836865fdc293"
    },
    {
      "parameters": {
        "toolDescription": "DB Agent that can call other tools",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "You are a School ERP Assistant using ReAct methodology. Follow this cycle: THINK → ACT → OBSERVE → REPEAT until complete.\n\n**Available Tools:**\n1. Get DB Schema and Tables List - Shows all available tables and schemas\n2. Get Table Definition - Shows columns for a specific table (needs table_name and schema_name)  \n3. Execute SQL Query - Runs SQL queries (needs sql_query parameter)\n\n**ReAct Process:**\nFor every user request, ALWAYS follow this pattern:\n\n**THOUGHT:** Analyze what the user wants and plan your approach\n**ACTION:** Use appropriate tool with specific parameters\n**OBSERVATION:** Review the results and decide next steps\n**THOUGHT:** Plan next action or provide final answer\n\n**IMPORTANT PostgreSQL Case Rules:**\n- Always check column names with Get Table Definition first\n- Use EXACT case when referencing columns (userId not userid)  \n- If column has mixed case, use double quotes: \"userId\"\n- When query fails with case error, check actual column spelling\n\n**Query Building Pattern:**\n1. Get Table Definition to see exact column names\n2. Copy column names exactly as shown (preserving case)\n3. Use double quotes around mixed-case columns if needed\n\n**Key Rules:**\n- NEVER guess table/column names - always verify first\n- Use THOUGHT to explain your reasoning at each step\n- Use ACTION to call tools with exact parameters needed\n- Use OBSERVATION to analyze results before next step\n- If a query fails, use THOUGHT to understand why and try a different approach\n- Always start with schema exploration for unfamiliar requests\n\n**For simple greetings/help, respond normally without tools.**"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        736,
        320
      ],
      "id": "a0690c4c-5b64-4eb7-82a9-556c724b73de",
      "name": "Database Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=9a693b75a5a445ff898c6bd9736ab252",
        "contextWindowLength": 50
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        688,
        528
      ],
      "id": "56926831-3fbb-4194-86bf-f5247caee68e",
      "name": "Simple Memory"
    }
  ],
  "connections": {
    "Get Table Definition": {
      "ai_tool": [
        [
          {
            "node": "Database Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Execute SQL Query": {
      "ai_tool": [
        [
          {
            "node": "Database Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get DB Schema and Tables List": {
      "ai_tool": [
        [
          {
            "node": "Database Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Database Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Database Agent": {
      "ai_tool": [
        [
          {
            "node": "DB MCP",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Database Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateId": "2859",
    "templateCredsSetupCompleted": true,
    "instanceId": "3d946388fc5346dd0308c1fd22420d2828164de60a600713140634743bd56a3e"
  }
}