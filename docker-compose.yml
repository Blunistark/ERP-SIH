services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: school-erp-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-school_erp}
      POSTGRES_USER: ${DB_USER:-school_admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # Changed to 5433 to avoid conflict with n8n
    networks:
      - school-erp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-school_admin} -d ${DB_NAME:-school_erp}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # School ERP Backend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: school-erp-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${DB_USER:-school_admin}:${DB_PASSWORD:-secure_password_123}@postgres:5432/${DB_NAME:-school_erp}?schema=public
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      BCRYPT_ROUNDS: 12
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      DEFAULT_LANGUAGE: en
      LOG_LEVEL: info
    networks:
      - school-erp-network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend/ERP
      dockerfile: Dockerfile
    container_name: erp-frontend
    restart: unless-stopped
    depends_on:
      - app
    networks:
      - school-erp-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: erp-nginx
    restart: unless-stopped
    ports:
      - "8080:80"   # Changed to 8080 to avoid conflict with n8n on port 80
      - "8443:443"  # Changed to 8443 to avoid conflict with n8n on port 443
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - app
    networks:
      - school-erp-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional, for future use)
  redis:
    image: redis:7-alpine
    container_name: school-erp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - school-erp-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: school-erp-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@schoolerp.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    networks:
      - school-erp-network
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  school-erp-network:
    driver: bridge
